/*previous codemodule.exports = function (n) {  var result=[];     if(n<=0)       result.push('error.nonpositive');     if(n%3===0)       result.push('error.three');     if(n%5===0){       result.push('error.five');     }  return result;};*//*//sofisicated codefunction nonPositiveValidationRule(n, result) {     if (n <= 0)       result.push('error.nonpositive');   }function nonDivisibleBy3ValidationRule(n, result) {     if (n % 3 === 0)       result.push('error.three');   }function nonDivisibleBy5ValidationRule(n, result) {     if (n % 5 === 0)       result.push('error.five');   }module.exports = function (n) {     var result = [];     nonPositiveValidationRule(n, result);     nonDivisibleBy3ValidationRule(n, result);     nonDivisibleBy5ValidationRule(n, result);     return result;};*//*function nonPositiveValidationRule(n, result) {     if (n <= 0)       result.push('error.nonpositive');}function makeNonDivisibleValidationRule(divisor, error) {  return function(n, result) {    if (n % divisor === 0)      result.push(error);    };}var nonDivisibleBy3ValidationRule = makeNonDivisibleValidationRule(3,   'error.three'),   nonDivisibleBy5ValidationRule = makeNonDivisibleValidationRule(5,   'error.five');module.exports = function (n) {     var result = [];     nonPositiveValidationRule(n, result);     nonDivisibleBy3ValidationRule(n, result);     nonDivisibleBy5ValidationRule(n, result);     return result;};*//*function nonPositiveValidationRule(n, result) {     if (n <= 0)       result.push('error.nonpositive');}function makeNonDivisibleValidationRule(divisor, error) {     return function(n, result) {       if (n % divisor === 0)         result.push(error);       };}var validationRules = [    nonPositiveValidationRule,    makeNonDivisibleValidationRule(3, 'error.three'),    makeNonDivisibleValidationRule(5, 'error.five')];module.exports = function (n) {//(int).reduce(int,int){return int}     return validationRules.reduce(function(result, rule) {//array.reduce(func(pre,cur)){処理;return ;}       rule(n, result);//nonPositiveValidationRule(n,result)etc;//各関数内でresult.pushされる       return result;     }, []);};*///  ../相対パス validator.js(excutefile)@lib, rules@validatorvar nonPositiveValidationRule = require('../rules/nonPositive'),    nonDivisibleValidationRule = require('../rules/nonDivisible'),    validationRules = [        nonPositiveValidationRule,        nonDivisibleValidationRule(3, 'error.three'),        nonDivisibleValidationRule(5, 'error.five')    ];module.exports = function (n) {     return validationRules.reduce(function (result, rule) {       rule(n, result);       return result;     }, []);};